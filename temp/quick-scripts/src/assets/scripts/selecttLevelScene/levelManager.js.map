{"version":3,"sources":["assets/scripts/selecttLevelScene/levelManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import GameDataStorage, { User } from \"../common/module/gameDataManager\";\nimport SoundsManager from \"../common/module/soundsManager\";\nimport SelectLevelScene from \"./selectLevelScene\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LevelManager extends cc.Component {\n\n    private levels: cc.Node[] = null;\n    private isLevelButton: boolean = false;\n    private selectLevelScene: SelectLevelScene = null;\n    private levelEntry: cc.Node = null;\n    /**\n     * 最大关数\n     */\n    private MaxLevelNum: number = null;\n    /**\n     * 最新解锁的关卡\n     */\n    private newLevel: number;\n\n    onLoad() {\n        this.levels = this.node.children;\n        this.selectLevelScene = cc.find(\"Canvas\").getComponent(\"selectLevelScene\");\n        this.levelEntry = this.levels[this.levels.length - 1];\n        this.MaxLevelNum = GameDataStorage.getGameConfig().getLevelsSum();\n    }\n\n    start() {\n        this.buttonEventBind();\n    }\n\n    /**\n     * 按钮事件绑定\n     */\n    private buttonEventBind() {\n        let buttons: cc.Node[] = this.node.children;\n        for (let i = 0; i < buttons.length; i++) {\n            let node: cc.Node = buttons[i];\n            let button: cc.Button = node.getComponent(cc.Button);\n            let click_event = new cc.Component.EventHandler();\n\n            //添加响应事件的必要参数，即响应函数所在的节点、组件、函数\n            click_event.target = this.node;\n            click_event.component = \"levelManager\";\n            click_event.handler = \"levelButtonFunc\";\n            click_event.customEventData = (i + 1).toString();\n            button.clickEvents.push(click_event);\n        }\n    }\n\n    levelButtonFunc(e, level) {\n        if (this.isLevelButton)\n            return;\n        this.isLevelButton = true;\n        SoundsManager.ins.playEffect(\"sounds/click\");\n\n        if (level > this.MaxLevelNum) { //最新关\n            this.selectLevelScene.toLevelScene(this.newLevel);\n            return;\n        }\n\n        this.selectLevelScene.toLevelScene(level);\n\n    }\n\n    /**\n     * 更新选关地图\n     */\n    updateLevelMap(user: User) {\n        let visitedN: number = user.getRushLevelsSum();\n        let levelsReview: number[] = user.getLevelsReview();\n        //更新已闯过的关\n        for (let i = 0; i < visitedN; i++) {\n            let level: cc.Node = this.levels[i];\n            let stars: cc.Node[] = level.children;\n            let getStarNum: number = levelsReview[i];\n            for (let j = 0; j < getStarNum; j++) {\n                let emptyStar: cc.Node = stars[j + 1].getChildByName(\"emptyStar\");\n                emptyStar.active = false;\n            }\n            level.active = true;\n        }\n\n        if (visitedN + 1 > GameDataStorage.getGameConfig().getLevelsSum())\n            return;\n\n        //更新没有闯的第一个新关\n        let nextLevel: cc.Node = this.levels[visitedN];\n        let pos: cc.Vec2 = nextLevel.getPosition();\n        this.levelEntry.setPosition(pos);\n        this.levelEntry.active = true;\n\n        //记录下最新关入口对应的关数\n        this.newLevel = visitedN + 1;\n\n        //添加响应事件的必要参数，即响应函数所在的节点、组件、函数\n        let button: cc.Button = nextLevel.getComponent(cc.Button);\n        let click_event = new cc.Component.EventHandler();\n        click_event.target = this.node;\n        click_event.component = \"levelManager\";\n        click_event.handler = \"levelButtonFunc\";\n        click_event.customEventData = (visitedN + 1).toString();\n        button.clickEvents.push(click_event);\n    }\n\n}\n"]}