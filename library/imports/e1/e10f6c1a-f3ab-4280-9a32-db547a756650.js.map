{"version":3,"sources":["assets/scripts/levelScene/combatLogic.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Creature from \"./creature\";\n\nexport default class CombatLogic {\n\n    private host: Creature = null;\n    private enemys: Creature[] = null;\n\n    constructor(host: Creature, enemys: Creature[]) {\n        this.host = host;\n        this.enemys = enemys;\n    }\n\n    /**\n     * Thinks combat logic\n     */\n    think() {\n        let eOfMinDis: [Creature, number] = this.getEnemyOfMinDis();\n        if (eOfMinDis === null) {\n            if (this.host.isTracking) {\n                this.host.stopTrack();\n                this.host.nonComLogic();\n            }\n            else if (!this.host.isNonComState)\n                this.host.nonComLogic();\n\n            return;\n        }\n\n        let e: Creature = eOfMinDis[0];\n        let l: number = eOfMinDis[1];\n\n        if (l <= this.host.rangeOfAttack) {\n            if (this.host.isTracking) {\n                this.host.stopTrack();\n                this.host.attack(e);\n            }\n            else if (!this.host.isAttacking)\n                this.host.attack(e);\n        }\n        else if (l <= this.host.rangeOfInvestigate) {\n            if (this.host.isNonComState) {\n                this.host.stopNonComLogic();\n                this.host.track(e.getWPos());\n            }\n            else if (this.host.isNonComState === null) {\n                this.host.isNonComState = false;\n                this.host.track(e.getWPos());\n            }\n            else if (this.host.isTracking)\n                this.host.refreshTrackTarget(e.getWPos());\n            else if (this.host.isAttacking)\n                return;\n            else\n                this.host.track(e.getWPos());\n        }\n        else if (!this.host.isNonComState)\n            this.host.nonComLogic();\n    }\n    /**\n     * 得到离宿主最近的敌人\n     */\n    private getEnemyOfMinDis(): [Creature, number] {\n        if (this.enemys.length === 0)\n            return null;\n\n        let minE: Creature = this.enemys[0];\n        let cp: cc.Vec2 = this.host.node.getPosition();\n        let ep: cc.Vec2 = minE.node.getPosition();\n        let minL: number = cp.sub(ep).mag();\n        for (let i = 1; i < this.enemys.length; i++) {\n            let e: Creature = this.enemys[i];\n            ep = e.node.getPosition();\n            let l: number = cp.sub(ep).mag();\n            if (l < minL) {\n                minL = l;\n                minE = e;\n            }\n        }\n        return [minE, minL];\n    }\n}\n"]}